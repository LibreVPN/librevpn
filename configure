#!/bin/bash
# Autoconfiguración del nodo
# Toma las variables del archivo 'config' y devuelve un tarball con la
# configuración, para descomprimir en /etc/tinc

# Imprimir todo a stderr
msg() { echo ":: $@" 1>&2; }

msg2() { echo "-> $@" 1>&2; }

error() { echo "ERROR: $@" 1>&2; }

# Encuentra una IP libre entre los archivos de host
get_ip() {
# Las subnets encontradas
    local subnets=/tmp/$$.subnets
    local ip=""
    local fourth=0
    local tries=0

# Armar la lista de IPs
    sed -e '/Subnet/!d' -e 's/.*= //' nodos/* | sort -V > ${subnets}

# Fallar si hay 250 nodos...
    if [ $(wc -l ${subnets} | cut -d' ' -f1) -ge 250 ]; then
# No detecta si hay varios rangos en uso pero por ahora sirve
        error "Este rango está agotado"
        return 1
    fi

# Hasta que encontremos una IP libre elegir el cuarto octeto al azar
    until [ -n "${ip}" ]; do
        let fourth=${RANDOM}%253
# TODO no hardcodear el rango
        local tmpip="192.168.9.${fourth}${subnet}"

# Está en la lista?
        if ! grep -q "${tmpip}" "${subnets}"; then
            ip="${tmpip}"
        fi

        let tries=${tries}+1
    done

    msg "Obtenida IP libre en ${tries} intentos"
    echo "${ip}"
}

# Tomar la configuración
source config

if [ -z "${ip}" ]; then
    msg 'Tenés que configurar al menos la IP del nodo (en config)'
    exit 1
fi

msg "Datos del nodo"
msg2 "El responsable del nodo es ${id}"
msg2 "El nombre de la VPN es ${vpn} y su rango es ${rango_vpn}"
msg2 "El nombre del nodo es ${node}"
msg2 "La dirección del nodo es ${address} (siempre es mejor un dominio que una IP)"
msg2 "La red del nodo será ${ip}${subnet}"
msg2 "Si no es correcto presione ^C para cancelar"
read pause

# Comprobar que todas las variables existan
vars=""
for var in id vpn rango_vpn node address ip subnet; do
    if [ -z "${!var}" ]; then
        vars="${vars}${var} "
    fi
done

if [ ${#vars} -gt 0 ]; then
    error "Las variables están vacías: ${vars}"
    exit 1
fi

msg "Creando configuración"
msg2 "Creando directorio"

# Dirección de los hosts
hosts=${vpn}/hosts
mkdir -p ${hosts}

# Escribir la configuración
msg2 "Nodo"
touch ${hosts}/${node}

# Dirección pública y dentro de la VPN
echo "Address = ${address}" >> ${hosts}/${node}
echo "Subnet = ${ip}${subnet}" >> ${hosts}/${node}

# Escribir el script tinc-up
sed -e "s/{{ip}}/${ip}/g" \
    -e "s/{{id}}/${id}/g" \
    -e "s/{{rango_vpn}}/${rango_vpn}/g" \
    skel/tinc-up > ${vpn}/tinc-up

# Nombre del nodo
sed "s/{{node}}/${node}/g" skel/tinc.conf > ${vpn}/tinc.conf

# tinc-down
cp skel/tinc-down ${vpn}/

# Hacer ejecutables
chmod +x ${vpn}/tinc-{up,down}

# Tomar todos los hosts de conectar_a y copiarlos al directorio de hosts
msg "Agregando los hosts remotos"
for host in ${conectar_a}; do
    msg2 "${host}"
    echo "ConnectTo = ${host}" >> ${vpn}/tinc.conf
    cp nodos/${host} ${hosts}/
done

# Generar las llaves
tincd -c ${PWD}/${vpn} -n ${vpn} --generate-keys=4096 && \
    msg "La red está configurada"

# Firmar con GPG para mandar por mail
msg "Firmar el archivo criptográficamente? (s/n)"
read yesno

if [ "${yesno}" = "s" ]; then
    gpg --output ${hosts}/${node}.sig --detach-sig ${hosts}/${node}
fi 

# Tomar todos los nodos en hosts
host_files=$(shopt -s nullglob; echo ${hosts}/${node}*)

# Crear el tarball
tar -cvzf ${vpn}.tar.gz ${vpn}/

msg2 "La configuración se encuentra en ${vpn}.tar.gz"
msg2 "Descomprimir en /etc/tinc"

msg "Enviá tu archivo de host a los responsables de los nodos:"
msg2 "${conectar_a[@]}"

msg2 "Archivos a enviar: ${host_files}"

exit $?
