#!/usr/bin/env bash

# Terminar ante el menor error
set -e
trap_exit() {
    msg "ARGH! Algo pasó" 1>&2
    exit 1
}

trap 'trap_exit' TERM HUP QUIT INT ERR

. "${LVPN_LIBDIR}/msg"

self="$(basename $0)"

# Agrega una linea a un archivo
add_to_file(){
    f=$1; shift

    echo "$@" >>$f
}

# Comprueba si los programas necesarios existen en el sistema
requires() {
    local missing=""
    for _bin in $@; do
        if ! which $_bin >/dev/null 2>&1; then
            missing+=" $_bin"
        fi
    done

    if [ ${#missing} -ne 0 ]; then
        fatal_error "Los siguientes programas no se encuentran en PATH:%s" "${missing}"
   fi
}

# Obtiene el directorio del nodo
# $1 nombre del nodo
get_node_dir() {
    node=$1
    dir="${LVPN_DIR}/nodos/${node}"

    if [ ! -d "${dir}" ] || [ ! -f "${dir}/tinc.conf" ]; then
        fatal_error "El nodo no existe o es inválido"
    fi

    echo "${dir}"
}

get_node_file() {
    dir="$(get_node_dir $1)"
    file="${dir}/hosts/$1"

    if [ ! -f "${file}" ]; then
        fatal_error "El archivo host de %s no existe" $1
    fi

    echo "${file}"
}

# Limpia el hostname, convierte todo lo no alfanumérico a _
# Ver tincd.conf(5)
get_node_name() {
  echo "$1" | sed -e "s/[^a-z_]/_/g"
}

# Encontrar el tipo de init que se va a usar para tinc
# Devuelve "tipo ubicacion"
# Ver lib/lvpn-install
find_init_system() {
  if [ -f /etc/debian_version ]; then
    echo "deb /etc/tinc/nets.boot"
  elif [ -f /etc/os-release ]; then
    echo "systemd /etc/systemd/system/multi-user.target.wants/tincd@${NETWORK}.service"
  else
    echo "unknown unknown"
  fi
}

# Obtiene la id del responsable del nodo
get_id() {
  if [ -z "$(git config --get user.name)" ]; then
    echo "# $(git config --get user.name) <$(git config --get user.email)>"
  else
    echo "# $USER@$HOSTNAME"
  fi
}
